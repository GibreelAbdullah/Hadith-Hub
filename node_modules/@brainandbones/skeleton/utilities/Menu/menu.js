// Action: Menu
// https://svelte.dev/repl/0ace7a508bd843b798ae599940a91783?version=3.16.7
// prettier-ignore
export function menu(node, args) {
    const elemMenu = document.querySelector(`[data-menu="${args.menu}"]`);
    if (!elemMenu)
        return;
    const onInit = () => {
        autoUpdateOrigin();
        // Apply a11y attributes
        elemMenu.setAttribute('role', 'menu');
    };
    // Menu States ---
    const menuOpen = () => {
        elemMenu.style.display = 'block';
        stateEventHandler(true);
    };
    const menuClose = () => {
        elemMenu.style.display = 'none';
        stateEventHandler(false);
    };
    const stateEventHandler = (state) => {
        if (args.state)
            args.state({ menu: args.menu, state });
    };
    // Click Handlers ---
    const onTriggerClick = () => {
        autoUpdateOrigin();
        menuOpen();
    };
    const onWindowClick = (event) => {
        args.interactive === true ? interactiveClickHandler(event) : standardClickHandler();
    };
    // Interactive FALSE - any click closes the menu
    const standardClickHandler = () => {
        menuClose();
    };
    // Interactive TRUE - clicks outside close menu
    const interactiveClickHandler = (event) => {
        const outsideNode = node && !node.contains(event.target);
        const outsideMenu = elemMenu && !elemMenu.contains(event.target);
        if (outsideNode && outsideMenu) {
            menuClose();
        }
    };
    // Menu - Set auto origin ---
    const autoUpdateOrigin = () => {
        if (!args.fixed && !elemMenu.classList.contains('hidden')) {
            // Get the Menu's bounds
            const elemTriggerBounds = node.getBoundingClientRect();
            // Determine vertical and horizontal values
            const vert = elemTriggerBounds.y < window.innerHeight / 2 ? 't' : 'b'; // top/bottom
            const horz = elemTriggerBounds.x < window.innerWidth / 2 ? 'l' : 'r'; // left/right
            // Strip and apply only the relevant class
            elemMenu.classList.remove('menu-tl', 'menu-tr', 'menu-bl', 'menu-br');
            elemMenu.classList.add(`menu-${vert}${horz}`);
        }
    };
    // A11y Input Handlers ---
    const onTriggerKeyDown = (event) => {
        if (['Enter', 'Space'].includes(event.code)) {
            event.preventDefault();
            // Trigger Menu
            onTriggerClick();
            // If menu open, set focus
            if (elemMenu.style.display === 'block') {
                elemMenu.focus();
            }
        }
    };
    const onWindowKeyDown = (event) => {
        if (['Escape'].includes(event.code)) {
            event.preventDefault();
            menuClose();
        }
    };
    // On Action Init
    onInit();
    // Window Events
    window.addEventListener('resize', autoUpdateOrigin, true);
    window.addEventListener('click', onWindowClick, true);
    window.addEventListener('keydown', onWindowKeyDown, true);
    // Trigger Node Events
    node.addEventListener('click', onTriggerClick);
    node.addEventListener('keydown', onTriggerKeyDown);
    node.addEventListener('change', (e) => {
        console.log(e);
    });
    // Lifecycle
    return {
        update: (newArgs) => { args = newArgs; },
        destroy: () => {
            window.removeEventListener('resize', onWindowClick, true);
            window.removeEventListener('click', onWindowClick, true);
            window.removeEventListener('keydown', onWindowKeyDown, true);
            node.removeEventListener('click', onTriggerClick);
            node.removeEventListener('keydown', onTriggerKeyDown);
        }
    };
}
